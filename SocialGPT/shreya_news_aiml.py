# -*- coding: utf-8 -*-
"""Shreya -- news-AIML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W8AsjaS7lDPcfKg5v3EX2eggrvP4g-DJ

Shreya: I talked to Viraaji and the graph we create should be from data of Tesla and First Repulic Bank, for now. Let's do our tests accordingly. Will work on the neetworkx part tomorrow morning EST.

Plan:
All our resulting data/network graph needs to be sent to the JP team. Thanks!

Thanks for the update Shreya :)
"""

!pip install transformers
!pip install sentencepiece
!pip install datasets
!pip install GoogleNews
!pip install feedparser
!pip install feedsearch
!pip install newspaper3k

from transformers import pipeline, AutoTokenizer, AutoModelForTokenClassification, AutoModelForSeq2SeqLM
from GoogleNews import GoogleNews

from feedsearch import search
import feedparser
import time
import newspaper
import json

"""Some random articles for testing"""

ARTICLE = """ LONDON, England (Reuters) -- Harry Potter star Daniel Radcliffe gains access to a reported £20 million ($41.1 million) fortune as he turns 18 on Monday, but he insists the money won't cast a spell on him. Daniel Radcliffe as Harry Potter in "Harry Potter and the Order of the Phoenix" To the disappointment of gossip columnists around the world, the young actor says he has no plans to fritter his cash away on fast cars, drink and celebrity parties. "I don't plan to be one of those people who, as soon as they turn 18, suddenly buy themselves a massive sports car collection or something similar," he told an Australian interviewer earlier this month. "I don't think I'll be particularly extravagant. "The things I like buying are things that cost about 10 pounds -- books and CDs and DVDs." At 18, Radcliffe will be able to gamble in a casino, buy a drink in a pub or see the horror film "Hostel: Part II," currently six places below his number one movie on the UK box office chart. Details of how he'll mark his landmark birthday are under wraps. His agent and publicist had no comment on his plans. "I'll definitely have some sort of party," he said in an interview. "Hopefully none of you will be reading about it." Radcliffe's earnings from the first five Potter films have been held in a trust fund which he has not been able to touch. Despite his growing fame and riches, the actor says he is keeping his feet firmly on the ground. "People are always looking to say 'kid star goes off the rails,'" he told reporters last month. "But I try very hard not to go that way because it would be too easy for them." His latest outing as the boy wizard in "Harry Potter and the Order of the Phoenix" is breaking records on both sides of the Atlantic and he will reprise the role in the last two films. Watch I-Reporter give her review of Potter's latest » . There is life beyond Potter, however. The Londoner has filmed a TV movie called "My Boy Jack," about author Rudyard Kipling and his son, due for release later this year. He will also appear in "December Boys," an Australian film about four boys who escape an orphanage. Earlier this year, he made his stage debut playing a tortured teenager in Peter Shaffer's "Equus." Meanwhile, he is braced for even closer media scrutiny now that he's legally an adult: "I just think I'm going to be more sort of fair game," he told Reuters. E-mail to a friend . Copyright 2007 Reuters. All rights reserved.This material may not be published, broadcast, rewritten, or redistributed."""

ARTICLE = '''Elon Musk is being accused of insider trading in a proposed class action by investors accusing the Tesla Inc CEO of manipulating the cryptocurrency Dogecoin, costing them billions of dollars.
In a Wednesday night filing in Manhattan federal court, investors said Musk used Twitter posts, paid online influencers, his 2021 appearance on NBC's "Saturday Night Live" and other "publicity stunts" to trade profitably at their expense through several Dogecoin wallets that he or Tesla controls.
Investors said this included when Musk sold about $124 million of Dogecoin in April after he replaced Twitter's blue bird logo with Dogecoin's Shiba Inu dog logo, leading to a 30% jump in Dogecoin's price.
A "deliberate course of carnival barking, market manipulation and insider trading" enabled Musk to defraud investors, promote himself and his companies, the filing said.'''

ARTICLE = ''''Jamie Dimon said in June that he was preparing the bank for an economic "hurricane" caused by the Federal Reserve and Russia's war in Ukraine. Al Drago | Bloomberg | Getty Images

JPMorgan Chase on Thursday shut down the website for a college financial aid platform it bought for $175 million after alleging the company's founder created nearly 4 million fake customer accounts. The country's biggest bank acquired Frank in September 2021 to help it deepen relationships with college students, a key demographic, a Chase executive told CNBC at the time. JPMorgan touted the deal as giving it the "fastest-growing college financial planning platform" used by more than 5 million students at 6,000 institutions. It also provided access to the startup's founder, Charlie Javice, who joined the New York-based bank as part of the acquisition. Months after the transaction closed, JPMorgan said it learned the truth after sending out marketing emails to a batch of 400,000 Frank customers. About 70% of the emails bounced back, the bank said in a lawsuit filed last month in federal court. Javice, who had approached JPMorgan in mid-2021 about a potential sale, lied to the bank about her startup's scale, the bank alleged. Specifically, after being pressed for confirmation of Frank's customer base during the due diligence process, Javice used a data scientist to invent millions of fake accounts, according to JPMorgan.

watch now

"To cash in, Javice decided to lie, including lying about Frank's success, Frank's size, and the depth of Frank's market penetration in order to induce JPMC to purchase Frank for $175 million," the bank said. "Javice represented in documents placed in the acquisition data room, in pitch materials, and through verbal presentations [that] more than 4.25 million students had created Frank accounts." Instead of gaining a business with 4.25 million students, JPMorgan had one with "fewer than 300,000 customers," JPMorgan said in the suit.

Frank emails

In the suit, JPMorgan alleged that Javice first asked her engineering chief to create "fake customer details" using algorithms. When he refused, she found a data science professor at a New York-area college to create the accounts, the lender said. The bank included incriminating emails between the unnamed professor and Javice in its suit. For instance, Javice had allegedly asked the professor, "Will the fake emails look real with an eye check or better to use unique ID?" JPMorgan had access to the emails because it had acquired Frank's technology systems as part of the acquisition, according to a person with knowledge of the situation.

Javice's defense

A lawyer for Javice told The Wall Street Journal that JPMorgan had "manufactured" reasons to fire her late last year to avoid paying millions of dollars owed to her. Javice has sued JPMorgan, saying the bank should front legal bills she incurred during its internal investigations. "After JPM rushed to acquire Charlie's rocketship business, JPM realized they couldn't work around existing student privacy laws, committed misconduct and then tried to retrade the deal," attorney Alex Spiro told the Journal. "Charlie blew the whistle and then sued." Spiro, a partner at Quinn Emanuel, didn't immediately return a call from CNBC. JPMorgan spokesman Pablo Rodriguez had this response: "Our legal claims against Ms. Javice and Mr. Amar are set out in our complaint, along with the key facts," he said. "Ms. Javice was not and is not a whistleblower. Any dispute will be resolved through the legal process."

The alleged fraud perpetrated by Javice and one of her executives "materially damaged JPMC in an amount to be proven at trial, but not less than $175 million," JPMorgan said in its suit. Regardless of the outcome of this legal scuffle, this is an embarrassing episode for JPMorgan and its CEO, Jamie Dimon. In a bid to fend off encroaching competitors, JPMorgan has gone on a buying spree of fintech companies in recent years, and Dimon has repeatedly defended his technology investments as necessary ones that will yield good returns. The fact that a young founder in an industry known for shaky metrics and a "fake it 'til you make it" ethos managed to allegedly dupe JPMorgan calls into question how stringent the bank's due diligence process is. In an interview at the time of the deal, Javice marveled at how far she had come in just a few years leading her startup. "Today is my first day employed by someone else, ever," Javice told CNBC. "I mean it still feels very much like, pinch me, did this really happen?" As a result of the legal scuffle, JPMorgan shut down Frank early Thursday morning. "Frank is no longer available" the website now reads. "To file your Free Application for Federal Student Aid (FAFSA), visit StudentAid.gov."'''

"""**Keyword-extractor**"""

## Loading the bert model and tokenizer for NER
ky_model = "dslim/bert-base-NER-uncased" #"yanekyuk/bert-uncased-keyword-extractor"

tokenizer = AutoTokenizer.from_pretrained(ky_model)
model = AutoModelForTokenClassification.from_pretrained(ky_model)

nlp = pipeline("ner", model=model, tokenizer=tokenizer,aggregation_strategy="first")

def extract_keywords(text):
    """
    Extract keywords and construct them back from tokens
    """
    result = list()
    keyword = ""
    for token in nlp(text):
        if token['entity_group'] == 'PER' or token['entity_group'] == 'ORG':
          result.append((token['word'],token['entity_group']))
    # return result
    return list(set(result))

extract_keywords(ARTICLE)

"""News Summary"""

## Loading the pegasus model for summarization
summarization_model = 'google/pegasus-cnn_dailymail'
model = AutoModelForSeq2SeqLM.from_pretrained(summarization_model)
tokenizer = AutoTokenizer.from_pretrained(summarization_model)

def summarize_article(text):

  tokens_input = tokenizer.encode("summarize: "+ text, return_tensors='pt', max_length=1024, truncation=True)
  ids = model.generate(tokens_input, min_length=80, max_length=120)
  summary = tokenizer.decode(ids[0], skip_special_tokens=True)

  return summary.split('<n>')

summarize_article(ARTICLE)

"""**News Dataset generation**"""

## To scrape complete news articles from links
def get_news_article_from_link(url):

  article = newspaper.Article(url=url, language='en')
  article.download()
  article.parse()

  return str(article.text)

get_news_article_from_link('https://www.msn.com/en-us/news/technology/tim-cook-bets-his-legacy-on-augmented-reality/ar-AA1cuGix')

## Using googlenews to generate links for a given ticker for last 365 days
 ## Google is blocking incase trying to scrape more than 10 links at one go

googlenews = GoogleNews()

googlenews.set_lang('en')
googlenews.set_period('365d')
# googlenews.set_time_range('06/01/2022','06/12/2023')
googlenews.set_encode('utf-8')

googlenews.search('TESLA site:cnn.com') #{CNN Business tech} OR {CNBC tech} OR {Bloomberg}

link_count = googlenews.total_count()

print(googlenews)
print(link_count)
# result2 = googlenews.page_at(2)
googleresult = googlenews.result(sort=True)
for gr in googleresult:
  print(gr['link'])
# for p in range(2, link_count//10):
# for p in range(2, 10):
#   googleresult.append(googlenews.page_at(p))
#   time.sleep(2)

keyword_list = []
summary_list = []
for result in googleresult:
  try: # Added try-except as not all websites allow scraping
    # print(result['desc'])
    print("---------------------------------------------------------------------------------------------------------------------------------------")
    url = result['link']
    # print(url)

    # if "youtube" in url:
    #   continue

    ''' TO DO - Also, Let's try to give the first few links from major articles that can be scraped - wsj, reuter, fox, etc. '''

    news = get_news_article_from_link(url) ## Summarize news
    time.sleep(2)
    #print("Raw news: \n",news)
    summary_news = summarize_article(news)
    summary_list.append(summary_news)
    print("Summary news: \n",' '.join(summary_news))
    extracted_keywords = extract_keywords(news) ## Keyword extraction
    keyword_list.append(extracted_keywords)
    print("")
    print("NER:")
    print(extracted_keywords)
    time.sleep(2)
    print('\n\n')
  except:
    pass

get_news_article_from_link('https://www.comingsoon.net/movies/trailers/1295648-foundation-season-2-trailer-apple-tv')

"""Integarted Flow"""

## TBD

"""# Bond Strength Logic"""

# Bond Strength Code
import spacy
from sklearn.metrics.pairwise import cosine_similarity

#nlp = spacy.load("en_core_web_md") ## NER model

doc1 = nlp("Elon Musk tweeted about Twitter today.")
print(doc1)
# doc2 = nlp("Elon Musk is the CEO of Tesla and SpaceX")

entities = ["Elon Musk", "Twitter", "Sukhdev"]

entity_vectors = []
for entity in entities:
    entity_vectors.append(nlp(entity).vector)

bond_scores = []
for i in range(len(entity_vectors)):
    for j in range(i + 1, len(entity_vectors)):
        bond_score = cosine_similarity([entity_vectors[i]], [entity_vectors[j]])[0][0]
        bond_scores.append((entities[i], entities[j], bond_score))

for bond_score in bond_scores:
    print(f"Bond score between {bond_score[0]} and {bond_score[1]}: {bond_score[2]}")

!python -m spacy download en_core_web_md

"""Graph Network"""

temp = [
    [('everlane', 'ORG'), ('instacart', 'ORG'), ('bard', 'ORG'), ('google search', 'ORG'), ('anthropology', 'ORG'), ('loft', 'ORG'), ('h & m', 'ORG'), ('google', 'ORG'), ('developer', 'ORG'), ('cnn', 'ORG'), ('shopify', 'ORG'), ('ebay', 'ORG'), ('amazon', 'ORG')],
    [('williams', 'PER'), ('constellation brands', 'ORG'), ('bud', 'ORG'), ('cinco de mayo', 'ORG'), ('light', 'ORG'), ('modelo', 'ORG'), ('bump', 'PER'), ('justin sullivan', 'PER'), ('busch light', 'ORG'), ('modelo especial', 'ORG'), ('dylan mulvaney', 'PER'), ('natural light', 'ORG'), ('- busch', 'ORG'), ('bud light', 'ORG'), ('cnn', 'ORG'), ('getty', 'ORG'), ('greg gallagher', 'PER'), ('anheuser - busch', 'ORG'), ('constellation', 'ORG'), ('williams', 'ORG')]
]

temp = [[{"Person":"Mark Zuckerberg","Entities":"Facebook News","Score":0.875839591},{"Person":"Mark Zuckerberg","Entities":"Netflix","Score":0.8674357533},{"Person":"Reed Hastings","Entities":"Mark Zuckerberg","Score":0.8611367941},{"Person":"Mark Zuckerberg","Entities":"Reed Hastings","Score":0.8611367941},{"Person":"Reed Hastings","Entities":"Facebook News","Score":0.8374944925},{"Person":"Reed Hastings","Entities":"Netflix","Score":0.8128017783},{"Person":"Reed Hastings","Entities":"YouTube","Score":0.8098326921},{"Person":"Mark Zuckerberg","Entities":"YouTube","Score":0.7299373746}]
]
temp.append([{"Person":"Tim Cook","Entities":"Cook","Score":0.9651293755},{"Person":"Akash Ambani","Entities":"Mukesh Ambani","Score":0.9619933367},{"Person":"Mukesh Ambani","Entities":"Akash Ambani","Score":0.9619933367},{"Person":"Akash Ambani","Entities":"Ashwini Vaishnaw","Score":0.8987739682},{"Person":"Ashwini Vaishnaw","Entities":"Akash Ambani","Score":0.8987739682},{"Person":"Tim Cook","Entities":"Apple","Score":0.8918125033},{"Person":"Mukesh Ambani","Entities":"Ashwini Vaishnaw","Score":0.8879785538},{"Person":"Ashwini Vaishnaw","Entities":"Mukesh Ambani","Score":0.8879785538},{"Person":"Akash Ambani","Entities":"Reliance Jio","Score":0.8861217499},{"Person":"Akash Ambani","Entities":"Reliance Industries","Score":0.8795196414},{"Person":"Mukesh Ambani","Entities":"Reliance Jio","Score":0.8789437413},{"Person":"Mukesh Ambani","Entities":"Reliance Industries","Score":0.8782302141},{"Person":"Ashwini Vaishnaw","Entities":"Reliance Jio","Score":0.8661504388},{"Person":"Ashwini Vaishnaw","Entities":"IT","Score":0.8566442728},{"Person":"Ashwini Vaishnaw","Entities":"Reliance Industries","Score":0.8524867892},{"Person":"Akash Ambani","Entities":"Tata Sons","Score":0.8504835367},{"Person":"Mukesh Ambani","Entities":"Tata Sons","Score":0.8500677347},{"Person":"Tim Cook","Entities":"Tata Sons","Score":0.8453862667},{"Person":"Tim Cook","Entities":"Reliance Jio","Score":0.8437806368},{"Person":"Ashwini Vaishnaw","Entities":"Tata Sons","Score":0.8330224156},{"Person":"Tim Cook","Entities":"Reliance Industries","Score":0.830786705},{"Person":"Mukesh Ambani","Entities":"Tim Cook","Score":0.8189110756},{"Person":"Tim Cook","Entities":"Mukesh Ambani","Score":0.8189110756},{"Person":"Tim Cook","Entities":"BKC","Score":0.8168957233},{"Person":"Tim Cook","Entities":"IT","Score":0.811882019},{"Person":"Akash Ambani","Entities":"BKC","Score":0.8067317009},{"Person":"Akash Ambani","Entities":"IT","Score":0.8043413758},{"Person":"Ashwini Vaishnaw","Entities":"BKC","Score":0.8041671515},{"Person":"Tim Cook","Entities":"Ashwini Vaishnaw","Score":0.8032221794},{"Person":"Ashwini Vaishnaw","Entities":"Tim Cook","Score":0.8032221794},{"Person":"Mukesh Ambani","Entities":"BKC","Score":0.7978495359},{"Person":"Tim Cook","Entities":"Akash Ambani","Score":0.7950614691},{"Person":"Akash Ambani","Entities":"Tim Cook","Score":0.7950614691},{"Person":"Mukesh Ambani","Entities":"IT","Score":0.7810673118},{"Person":"Mukesh Ambani","Entities":"Cook","Score":0.7793932557},{"Person":"Ashwini Vaishnaw","Entities":"Apple","Score":0.7738898396},{"Person":"Mukesh Ambani","Entities":"Apple","Score":0.7683075666},{"Person":"Akash Ambani","Entities":"Apple","Score":0.7576156855},{"Person":"Ashwini Vaishnaw","Entities":"Cook","Score":0.7563371062},{"Person":"Akash Ambani","Entities":"Cook","Score":0.7547136545}])

temp

from typing import Counter
import networkx as nx
G = nx.DiGraph()
for innerlist in temp:
  for node in innerlist:
    G.add_nodes_from([node['Person'],node['Entities']])

import networkx as nx

G = nx.DiGraph()
for innerlist in temp:
  for node in innerlist:
    G.add_nodes_from([node['Person'],node['Entities']])
    G.add_edge(node['Person'], node['Entities'])

person_node = 'Ashwini Vaishnaw'
person_node_count = G.in_degree(person_node)

print(f"The node '{person_node}' appears {person_node_count} times.")

temp

G.nodes

for innerlist in temp:

  for node1 in innerlist:
    if node1[1]=='PER':
      for node2 in innerlist:
        if node2!=node1:
          G.add_edges_from([(node1[0],node2[0])])

          dictionary = {}
          dictionary[('node')]

import math
nx.draw(G,with_labels=True,pos = nx.spring_layout(G,k=5/math.sqrt(G.order())), font_size=5)

G.adj

